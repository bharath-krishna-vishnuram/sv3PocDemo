@page
@model Trial.MvcDemoApplication.Web.Pages.PDM.Components.ViewModalModel

@using Trial.MvcDemoApplication.Localization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<MvcDemoApplicationResource> L

@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Modal;

@inject Volo.Abp.AspNetCore.Mvc.UI.Layout.IPageLayout PageLayout
@{
    PageLayout.Content.Title = L["PageHeaders:Discriptors"];
    PageLayout.Content.BreadCrumb.Add(L["PageHeaders:StructureConstruction"], "/PDM/Structures/ViewHierarchy?id=" + Model.StructureId);
    var constraintComponentApiUrl = "/api/app/component/constraint-components/" + Model.Id;
    int i = 0;
}
<style>

    /* General button styles */
    .btn-icon:hover {
        background-color: #d0d0d0; /* Darker grey on hover */
    }

    .add-btn .fas {
        color: green;
    }

    .remove-btn .fas {
        color: red;
    }

    .up-btn .fas, .down-btn .fas {
        color: #333; /* Dark gray, adjust as needed */
    }

    /* Icons within the buttons */
    .btn-icon i {
        font-size: 12px; /* Size of the icon */
    }

</style>
<abp-card background="Light" text-color="Dark" border="Success" class="mb-3">
    <abp-card-header>
        <abp-row>
            <abp-column size-md="_6">
                @L["PageHeaders:Discriptors"]
            </abp-column>
        </abp-row>
    </abp-card-header>
    <abp-card-body background="Light" text-color="Dark" border="Success" size-md="_1">
        <abp-list-group>
            <abp-list-group-item class="Component-group">
                <button class="btn" type="button" data-bs-toggle="collapse" data-bs-target="#DescriptorsSections" aria-expanded="true" aria-controls="collapseOne">
                    @Model.Component.Name
                </button>
                <abp-button-group size="Small" background="Dark">
                    <!-- Add Button -->
                    <abp-button button-type="Light" class="btn-icon add-btn" data-bs-toggle="modal" data-bs-target="#addDescriptor" icon="plus" title="Add Descriptor" onclick="clearBindVariables()"  />
                    <!-- Add Button -->
                    <abp-button button-type="Dark" class="btn-icon add-btn" data-bs-toggle="modal" data-bs-target="#addConstraint" icon="plus" title="Add Constraint" />
                </abp-button-group>
            </abp-list-group-item>
            <abp-list-group flush="true">
                <abp-collapse-body id="DescriptorsSections">
                    @foreach (var descriptor in Model.Component.Descriptors)
                    {
                        <abp-list-group-item>
                            <div class="accordion" id="@descriptor.Name">
                                <div class="card-header" id="headingOne">
                                    <button onclick="display('@descriptor.Id', '@i')" class="btn" type="button" data-bs-toggle="collapse"
                                            data-bs-target="#@i" aria-expanded="true" aria-controls="collapseOne">
                                        @descriptor.Name
                                    </button>
                                    <abp-button-group size="Small" background="Dark">
                                        <!-- Add Button -->
                                        <abp-button class="btn-icon add-btn" data-bs-toggle="modal" data-bs-target="#addOption"
                                                    onclick="handleOptionAdd('@Model.Id', '@descriptor.Id')" icon="plus" title="Add Option" />
                                        <!-- Remove Button -->
                                        <abp-button class="btn-icon remove-btn" onclick="removeDescriptor('@Model.Id', '@descriptor.Id')" icon="times"
                                                    title="Remove Descriptor and its Options" />
                                    </abp-button-group>
                                </div>
                            </div>

                            <abp-collapse-body id="@i">
                                <abp-list-group id="OptionsSection_@i">
                                </abp-list-group>
                            </abp-collapse-body>
                        </abp-list-group-item>
                        i++;
                    }
                    @foreach (var descriptor in Model.Component.ConstraintDescriptors)
                    {
                        <abp-list-group-item>
                            <div class="accordion" id="@descriptor.Name">
                                <div class="card-header" id="headingOne">
                                    <abp-button button-type="Dark" onclick="display('@descriptor.Id', '@i')" class="btn" data-bs-toggle="collapse"
                                            data-bs-target="#@i" aria-expanded="true" aria-controls="collapseOne">
                                        @descriptor.Name
                                    </abp-button>
                                    <abp-button-group size="Small" background="Dark">
                                        <!-- Remove Button -->
                                        <abp-button class="btn-icon remove-btn" onclick="removeConstraint('@Model.Id', '@descriptor.Id')" icon="times"
                                                    title="Remove Constraint Descriptor" />
                                    </abp-button-group>
                                </div>
                            </div>

                            <abp-collapse-body id="@i">
                                <abp-list-group id="OptionsSection_@i">
                                </abp-list-group>
                            </abp-collapse-body>
                        </abp-list-group-item>
                        i++;
                    }
                </abp-collapse-body>
            </abp-list-group>
        </abp-list-group>
    </abp-card-body>
</abp-card>
<abp-modal centered="true" scrollable="true" size="Small" id="addDescriptor">
    <abp-modal-header title="Add new Descriptor"></abp-modal-header>
    <form method="post">
        <abp-modal-body>
            <label>Descriptor Name</label>
            <select id="DescriptorNameId" asp-for="DescriptorNameId"
                    class="auto-complete-select"
                    data-autocomplete-api-url="/api/app/text?IsDescriptor=true"
                    data-autocomplete-display-property="textName"
                    data-autocomplete-value-property="id"
                    data-autocomplete-items-property="items"
                    data-autocomplete-filter-param-name="filter"
                    data-autocomplete-parent-selector="#addDescriptor"
                    data-autocomplete-allow-clear="true">
                <!-- You can define selected option(s) here  -->
            </select>
        </abp-modal-body>
        <abp-modal-footer buttons="@(AbpModalButtons.Save|AbpModalButtons.Close)"></abp-modal-footer>
    </form>
</abp-modal>
<abp-modal centered="true" scrollable="true" size="Small" id="addConstraint">
    <abp-modal-header title="Add new Constraint"></abp-modal-header>
    <form method="post" asp-page-handler="AddConstraint">
        <abp-modal-body>
            <input type="hidden" asp-for="Id" value="">
            <label>Constraint Component</label>
            <select id="ConstraintComponent" asp-for="ConstraintComponentId" onchange="onComponentChange('@Model.Id')"
                    class="auto-complete-select"
                    data-autocomplete-api-url=@constraintComponentApiUrl
                    data-autocomplete-display-property="name"
                    data-autocomplete-value-property="id"
                    data-autocomplete-items-property=""
                    data-autocomplete-filter-param-name="ComponentNameFilter"
                    data-autocomplete-parent-selector="#addConstraint"
                    data-autocomplete-allow-clear="true">
                <!-- You can define selected option(s) here  -->
                <option value="">Select Component</option>
            </select>
            <label>Constraint Descriptor</label>
            <!-- "/api/app/component/b5aa464f-be93-435b-af4c-23912d435b48"-->
            <select id="ConstraintDescriptor" asp-for="ConstraintDescriptorId" disabled>
                <option value="">Select Descriptor</option>
            </select>
        </abp-modal-body>
        <abp-modal-footer buttons="@(AbpModalButtons.Save|AbpModalButtons.Close)"></abp-modal-footer>
    </form>
</abp-modal>

    <abp-modal  centered="true" scrollable="true" size="Small" id="addOption">
        <abp-modal-header title="Add New Option"></abp-modal-header>
        <form method="post" asp-page-handler="AddOption"> >
            <abp-modal-body>
                <input type="hidden" asp-for="AssociatedDescriptorId" value="">
                <input type="hidden" asp-for="Id" value="">

                <label>Option Name</label>
                    <select asp-for="OptionsNameId"
                            class="auto-complete-select"
                            data-autocomplete-api-url="/api/app/text?IsOption=true"
                            data-autocomplete-display-property="textName"
                            data-autocomplete-value-property="id"
                            data-autocomplete-parent-selector="#addOption"
                            data-autocomplete-items-property="items"
                            data-autocomplete-filter-param-name="filter"
                            data-autocomplete-allow-clear="true">
                    </select>
            </abp-modal-body>
            <abp-modal-footer buttons="@(AbpModalButtons.Save|AbpModalButtons.Close)"></abp-modal-footer>
        </form>
    </abp-modal>

<script>
    function display(descriptorId, idx) {
        // Assuming trial.mvcDemoApplication.pDM.component.get is a function that returns a Promise
        trial.mvcDemoApplication.pDM.component.getAllDescriptorOptions(descriptorId) // Replace 'id' with the actual ID if necessary
            .then(options => {
                    const list = document.getElementById('OptionsSection_' + idx);
                    list.innerHTML = ''; // Clear the list before adding new items
                    options.forEach(option => {
                    let listItem = document.createElement('li');
                    listItem.className = 'list-group-item';

                    let button = document.createElement('button');
                    button.className = 'btn btn-sm';
                    button.type = 'button';
                    button.textContent = option.name;
                    button.setAttribute('data-busy-text', 'Processing...');


                    let removeButton = document.createElement('button');
                    removeButton.className = 'btn-icon btn btn-sm';
                    removeButton.type = 'button';
                    removeButton.title = 'Remove Option'
                    removeButton.setAttribute('data-busy-text', 'Processing...');
                    removeButton.onclick = function() {
                            // logic for handling remove operation
                        trial.mvcDemoApplication.pDM.component.removeDescriptorOption(option.id)
                                .then(function (data) {
                                    abp.notify.info('Successfully deleted!');
                                    location.reload()
                                })
                            };

                    let icon = document.createElement('i');
                    icon.className = 'fa fa-times';
                    removeButton.appendChild(icon);
                    listItem.appendChild(button)
                    listItem.appendChild(removeButton)
                    list.appendChild(listItem);
                });
            })
            .catch(error => {
                console.error('Error fetching descriptors:', error);
            });
    }

    function removeDescriptor(componentId, descriptorId) {
        // logic for handling remove operation
        trial.mvcDemoApplication.pDM.component.removeDescriptor(componentId, descriptorId)
            .then(function (data) {
                abp.notify.info('Successfully deleted!');
                location.reload()
            })
    }
    function clearBindVariables() {
        document.getElementById('AssociatedDescriptorId').value = '';
        document.getElementById('ConstraintComponentId').value = '';
        document.getElementById('ConstraintDescriptorId').value = '';
        document.getElementById('DescriptorNameId').value = '';
    }

    function onComponentChange(cid) {
        var ConstraintComponentId = document.getElementById('ConstraintComponent').value;
        var descriptorDropdown = document.getElementById('ConstraintDescriptor');
        document.getElementById('Id').value = cid;

        if (ConstraintComponentId) {
            // Enable the second dropdown
            descriptorDropdown.removeAttribute('disabled');

            // Call your function and populate the second dropdown
            trial.mvcDemoApplication.pDM.component.get(ConstraintComponentId)
                .then(function (response) {
                    // Check if descriptors are available
                    if (response.descriptors && response.descriptors.length > 0) {
                        descriptorDropdown.innerHTML = '<option value="">Select Descriptor</option>';
                        response.descriptors.forEach(function (descriptor) {
                            var option = new Option(descriptor.name, descriptor.id);
                            descriptorDropdown.add(option);
                        });
                    } else {
                        // Handle the scenario when descriptors array is empty
                        descriptorDropdown.innerHTML = '<option value="">No descriptors available</option>';
                    }
                })

        } else {
            // If no component is selected, disable and clear the second dropdown
            descriptorDropdown.setAttribute('disabled', '');
            descriptorDropdown.innerHTML = '<option value="">Select Descriptor</option>';
        }
    }

    function handleOptionAdd(componentId, descriptorId) {
            document.getElementById('AssociatedDescriptorId').value = descriptorId;
            document.getElementById('Id').value = componentId;
    }
</script>
