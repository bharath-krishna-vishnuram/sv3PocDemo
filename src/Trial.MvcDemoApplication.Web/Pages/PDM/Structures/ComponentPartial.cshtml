@model Trial.MvcDemoApplication.PDM.Dtos.Structure.ComponentHierarchyDto
@{
    Guid structureId = ViewData.ContainsKey("structureId") ? (Guid)ViewData["structureId"]!
            : Guid.Empty;
    bool isRootLevel = ViewData.ContainsKey("isRootLevel") && Convert.ToBoolean(ViewData["isRootLevel"]);
    bool isLastSubComponent = ViewData.ContainsKey("isLastSubComponent") && Convert.ToBoolean(ViewData["isLastSubComponent"]);
    bool isFirstSubComponent = ViewData.ContainsKey("isFirstSubComponent") && Convert.ToBoolean(ViewData["isFirstSubComponent"]);
    var componentName = @Model.Name.Replace(" ", string.Empty);
    var subComponents = "SubComponentOf_" + componentName;
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.0/css/all.min.css">
@section scripts
{
    <abp-script src="/Pages/PDM/Structures/Index.js">
        var myData = '@Model.Id';
    </abp-script>
}
<style>
    /* Style for the list items */
    li {
        font-size: 18px; /* Adjust based on your preference */
        margin-bottom: 3px;
    }

    /* General button styles */

    .btn-icon:hover {
        background-color: #d0d0d0; /* Darker grey on hover */
    }

    .add-btn .fas {
        color: green;
    }

    .remove-btn .fas {
        color: red;
    }

    .up-btn .fas, .down-btn .fas {
        color: #333; /* Dark gray, adjust as needed */
    }

    /* Icons within the buttons */
    .btn-icon i {
        font-size: 12px; /* Size of the icon */
    }

    /* Icons within the buttons */
    .structure-group {
        font-size: 15px; /* Size of the icon */
    }

</style>
<abp-list-group-item class="structure-group">
    <div class="accordion" id="@componentName">
        <div class="card-header" id="headingOne">
            <button class="btn" type="button" data-bs-toggle="collapse" data-bs-target="#@subComponents" aria-expanded="true" aria-controls="collapseOne">
                @Model.Name
            </button>
            <abp-button-group size="Small" background="Dark">
                <!-- Add Button -->
                <abp-button class="btn-icon add-btn" onclick="handleAdd('@Model.Id')" icon="plus" title="Add Sub Component"/>
                <!-- Remove Button -->
                <abp-button class="btn-icon remove-btn" onclick="handleRemove('@Model.Id')" icon="times" 
                    title="Remove Component and its Sub-Components"/>
                @if (!isRootLevel)
                {
                    @if (!isFirstSubComponent)
                    {
                        <!-- Up Arrow Button -->
                        <abp-button class="btn-icon up-btn" onclick="handleMoveUp('@Model.Id')" icon="arrow-up" 
                            title="Move Sub Component Up"/>
                    }
                    @if (!isLastSubComponent)
                    {
                        <!-- Down Arrow Button -->
                        <abp-button class="btn-icon down-btn" onclick="handleMoveDown('@Model.Id')" icon="arrow-down" 
                            title="Move Sub Component Down"/>
                    }
                    <!-- View Button -->
                    <abp-button class="btn-icon" onclick="handleView('@Model.Id')" icon="eye"
                                title="View Component Details"/>
                }
            </abp-button-group>
        </div>
    </div>

    <div id="@subComponents" class="collapse hide" aria-labelledby="headingOne" data-bs-parent="#@componentName">
        @if (Model.SubComponents?.Any() == true)
        {
            int i = 0;
            ViewData["isRootLevel"] = false;
            ViewData["isFirstSubComponent"] = true;
            <abp-accordion>
                <abp-list-group flush="true">
                    @foreach (var subComponent in Model.SubComponents)
                    {
                        ViewData["isLastSubComponent"] = i + 1 == Model.SubComponents.Count;
                        <partial name="ComponentPartial" model="@subComponent" />
                        i++;
                        ViewData["isFirstSubComponent"] = false;
                    }
                </abp-list-group>
            </abp-accordion>
        }
    </div>
</abp-list-group-item>
<script>
    function handleAdd(componentId) {
        var createModal = new abp.ModalManager(abp.appPath + 'PDM/Components/CreateModal');
        createModal.open({ parentComponentId: componentId })
            createModal.onResult(function () {
                abp.notify.info('Added Sub-component Successfully!');
            location.reload()
        });
    }

    function handleRemove(id) {
        // logic for handling remove operation
        trial.mvcDemoApplication.pDM.component.delete(id)
            .then(function (data) {
                abp.notify.info('Successfully deleted!');
                location.reload()
            })
    }

    function handleMoveUp(componentId) {
        trial.mvcDemoApplication.pDM.component.decreaseOrder(componentId)
            .then(function (data) {
                abp.notify.info('Moved component sucessfully!');
                location.reload()
            })
    }


    function handleMoveDown(componentId) {
        trial.mvcDemoApplication.pDM.component.increaseOrder(componentId)
            .then(function (data) {
                abp.notify.info('Moved component sucessfully!');
                location.reload()
            })
    }
    function handleView(componentId) {
        // logic for View Component Details
        location.href = "/PDM/Components/ViewModal?id=" + componentId;
    @*trial.mvcDemoApplication.pDM.component.get(id).done(function (result) { console.log(result); });*@
            alert('View Component Details for ID: ' + componentId);
    }
</script>

