@page
@using Trial.MvcDemoApplication.Web.Pages.PDM.Structures
@model Trial.MvcDemoApplication.Web.Pages.PDM.Structures.ViewHierarchyModel

@using Trial.MvcDemoApplication.Localization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<MvcDemoApplicationResource> L

@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Modal;

@inject Volo.Abp.AspNetCore.Mvc.UI.Layout.IPageLayout PageLayout
@{
    PageLayout.Content.Title = L["PageHeaders:StructureHierarchy"];
    PageLayout.Content.BreadCrumb.Add(L["PageHeaders:Structures"], "/PDM/Structures");
    ViewData["isRootLevel"] = true;
    ViewData["structureId"] = @Model.Id;
}

@section scripts
{
    <abp-script src="/Pages/PDM/Structures/Index.js" />
}
<link href="https://unpkg.com/treeflex/dist/css/treeflex.css" rel="stylesheet">
<abp-card background="Light" text-color="Dark" border="Success" class="mb-3">
    <abp-card-header>
        <abp-row>
            <abp-column size-md="_6">
                @L["PageHeaders:StructureHierarchy"]
            </abp-column>
            <abp-column size-md="_6" class="text-end">
                <abp-button id="previewHierarchy"
                            text="@L["Toggle Hierarchy View"].Value"
                            icon="eye"
                            onclick="populateStructureHierarchy('@Model.Id')"
                            abp-collapse-id="HierarchyView"
                            button-type="Success"
                            />
            </abp-column>
        </abp-row>
    </abp-card-header>
    <abp-card-body background="Light" text-color="Dark" border="Success" size-md="_1">
        @if (@Model.Structure != null)
        {
            <abp-accordion>
                <abp-list-group id="StructureView" flush="true">
                    <partial name="ComponentPartial" model="@Model.Structure.RootComponent" />
                </abp-list-group>
            </abp-accordion>
        }
    </abp-card-body>
</abp-card>

<abp-collapse-body id="HierarchyView">
        @Html.Raw(ViewHierarchyModel.ConvertToHtmlTree(Model.Structure))
</abp-collapse-body>

<script>
    // Function to convert data to HTML tree structure
    function convertToHtmlTree(data) {
        if (!data) return '<div/>';
        function buildTree(node) {
            if (!node) {
                return '';
            }
            let html = '';
            if (node.subComponents && node.subComponents.length > 0) {
                html += `<li><span class='tf-nc'>${node.name}</span><ul>`;
                node.subComponents.forEach(subComponent => {
                    html += buildTree(subComponent);
                });
                html += '</ul></li>';
            } else {
                html += `<li><span class='tf-nc'>${node.name}</span></li>`;
            }
            return html;
        }

        let htmlTree = "<div class='tf-tree example'><ul>";
        htmlTree += buildTree(data.rootComponent);
        htmlTree += '</ul></div>';
        console.log(htmlTree)
        return htmlTree.replace(/<ul><\/ul>/g, '');
    }

     //Event listener for the button click

    //document.getElementById('previewHierarchy').addEventListener('click', function ()
    function populateStructureHierarchy(structureId) {
        // Call convertToHtmlTree with your data
        trial.mvcDemoApplication.pDM.structure.getStructureHierarchy(structureId)
            .then(structureData => {
                const htmlTree = convertToHtmlTree(structureData);
                // Populate the HierarchyView element with the HTML tree
                document.getElementById('HierarchyView').innerHTML = htmlTree;
            });
    }
</script>

